import { mat4, quat, vec3 } from "gl-matrix";
import { Transform3D } from "./types/gen/types.js";
export declare const CMP_EPSILON = 0.00001;
export declare function is_zero_approx(val: number): boolean;
export declare function is_equal_approx(a: number, b: number): boolean;
export declare function is_less_or_equal_approx(a: number, b: number): boolean;
export declare function is_less_approx(a: number, b: number): boolean;
export declare function is_greater_or_equal_approx(a: number, b: number): boolean;
export declare function is_greater_approx(a: number, b: number): boolean;
export declare function fposmod(n: number, d: number): number;
export declare function fract(x: number): number;
export declare function pingpong(value: number, length: number): number;
export declare function signbit(value: number): 0 | 1;
export declare function CLAMP(v: number, min: number, max: number): number;
export declare const round: (x: number) => number;
export declare function cubic_interpolate(p_from: number, p_to: number, p_pre: number, p_post: number, p_weight: number): number;
export declare function cubic_interpolate_in_time(p_from: number, p_to: number, p_pre: number, p_post: number, p_weight: number, p_to_t: number, p_pre_t: number, p_post_t: number): number;
export declare function cubic_interpolate_vec3(res: vec3, p_a: vec3, p_b: vec3, p_pre_a: vec3, p_post_b: vec3, p_weight: number): vec3;
export declare function cubic_interpolate_in_time_vec3(res: vec3, p_a: vec3, p_b: vec3, p_pre_a: vec3, p_post_b: vec3, p_weight: number, p_b_t: number, p_pre_a_t: number, p_post_b_t: number): vec3;
export declare function spherical_cubic_interpolate(res: quat, p_a: quat, p_b: quat, p_pre_a: quat, p_post_b: quat, p_weight: number): quat;
export declare function spherical_cubic_interpolate_in_time(res: quat, p_a: quat, p_b: quat, p_pre_a: quat, p_post_b: quat, p_weight: number, p_b_t: number, p_pre_a_t: number, p_post_b_t: number): quat;
export declare function transform3d_to_mat4(transform: Transform3D, out?: mat4): mat4;
export declare function generateUUID(): string;
